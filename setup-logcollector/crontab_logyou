# Edit this file to introduce tasks to be run by cron.
#
# Each task to run has to be defined through a single line
# indicating with different fields when the task will be run
# and what command to run for the task
#
# To define the time you can provide concrete values for
# minute (m), hour (h), day of month (dom), month (mon),
# and day of week (dow) or use '*' in these fields (for 'any').#
# Notice that tasks will be started based on the cron's system
# daemon's notion of time and timezones.
#
# Output of the crontab jobs (including errors) is sent through
# email to the user the crontab file belongs to (unless redirected).
#
# For example, you can run a backup of all your user accounts
# at 5 a.m every week with:
# 0 5 * * 1 tar -zcf /var/backups/home.tgz /home/
#
# For more information see the manual pages of crontab(5) and cron(8)
#
# m h  dom mon dow   command
#Move, Zip and FTP
5 * * * * [BACKUP_FOLDER]/backupandzip.py
30 * * * * [BACKUP_FOLDER]/ftpoverssh.py
#Source use size
25 * * * * [BACKUP_FOLDER]/chksize.py
#Collecter status
*/2 * * * * [BACKUP_FOLDER]/chkusage.py
#Source keep alive
*/2 * * * * [BACKUP_FOLDER]/chklastmod.py
#Auto remove by date => tmp ES zip
35 0 * * * [BACKUP_FOLDER]/auto_delete.py -b 5 -z 92 -s 40
#Cal API: source_usage to source_usage_hitory table
0 1 * * * [BACKUP_FOLDER]/cal_usage_history.sh
#DataBase Backup
15 0 * * * [BACKUP_FOLDER]/dbbackup.py
#Check disk space and delete es index => disk percentage
*/5 * * * * [BACKUP_FOLDER]/chk_dsk_n_del_es.py -s 80
#Check Service
*/10 * * * * [BACKUP_FOLDER]/chk_service.py
#Delete ES Replicates
55 3 * * sat curl -XPUT "localhost:9200/_settings" -H 'Content-Type: application/json' -d'{ "index" : { "number_of_replicas" : 0 }}'
