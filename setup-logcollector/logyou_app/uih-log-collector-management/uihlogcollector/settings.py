"""
Django settings for uihlogcollector project.

Generated by 'django-admin startproject' using Django 2.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os
import dj_database_url

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'dohib4r97(ol(ne!=#l4#65(ozxsw&w%kz+@d*p(2_!on4o3h^'

# set domain to use for session cookies. 
# Set this to a string such as "example.com"  for cross-domain cookies, 
# or use None for a standard domain cookie.
# set DOMAIN_NAME='uihlab.uih.co.th'
SESSION_COOKIE_DOMAIN =os.environ.get('DOMAIN_NAME',None)

# set csrf cookie name to logyoutoken, not same in vironment
CSRF_COOKIE_NAME='logyoutoken'

# set cookie nameto logyouid, not same in vironment
SESSION_COOKIE_NAME='logyouid'

# Leaving this setting off isn’t a good idea 
# because an attacker could capture an unencrypted session cookie 
#with a packet sniffer and use the cookie to hijack the user’s session.
#set SESSION_COOKIE_SECURE=True
SESSION_COOKIE_SECURE= True if os.environ.get('SESSION_COOKIE_SECURE',"False").lower() == 'true' else False

# set session expire when browser is close
SESSION_EXPIRE_AT_BROWSER_CLOSE=True
# set session expire when 1 hour
SESSION_COOKIE_AGE = 60 * 60

#limit data body 5M
DATA_UPLOAD_MAX_MEMORY_SIZE = 5242880
# SECURITY WARNING: don't run with debug turned on in production!

DEBUG = True if os.environ.get('DJANGO_DEBUG',"True").lower() == 'true' else False
print("----> Debugger : %s(%s)" %(DEBUG, type(DEBUG)))
 
ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
    'django_extensions',
    'rest_framework',
    'rest_framework.authtoken',
    'colorfield',
    'uihlogmodels.apps.UihlogmodelsConfig',

    'uihlogcollectorrestserver.apps.UihlogcollectorrestserverConfig',
    'uihlogmaintemplate.apps.UihlogmaintemplateConfig',
    'uihlogdashboard.apps.UihlogdashboardConfig',
    'uihlinenotify.apps.UihlinenotifyConfig',
    'uihlogutility.apps.UihlogutilityConfig',
#    'uihlogcollectoralert.apps.UihlogcollectoralertConfig',

    #'uihlogcollectoranalytic.apps.UihlogcollectoranalyticConfig'
    
    #'uihlogcollectoralert.apps.UihlogcollectoralertConfig',
    #'uihlogcollectorkeepalive.apps.UihlogcollectorkeepaliveConfig',
    'admin_reorder',
    'django_apscheduler',
    'django_requestlogging',

    'django_otp',
    'django_otp.plugins.otp_static',
    'django_otp.plugins.otp_totp',
    'two_factor',
    'bootstrapform',
    #tong
    'uihterminal.apps.UihterminalConfig',
    'channels',
]

ENABLE_MODULE = True if os.environ.get('ENABLE_MODULE',"False").lower() == 'true' else False

if ENABLE_MODULE:
    #module keep alive
    print("add : uihlogcollectorkeepalive")
    INSTALLED_APPS.append('uihlogcollectorkeepalive.apps.UihlogcollectorkeepaliveConfig')
    #module alert
    print("add : uihlogcollectoralert")
    INSTALLED_APPS.append('uihlogcollectoralert.apps.UihlogcollectoralertConfig')
    

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'global_login_required.GlobalLoginRequiredMiddleware',
    'admin_reorder.middleware.ModelAdminReorder',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'uihlogutility.middleware.UtilityLogMiddleware',
    'django_otp.middleware.OTPMiddleware'
]



ROOT_URLCONF = 'uihlogcollector.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, "templates")],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.csrf'
            ],
        },
    },
]

WSGI_APPLICATION = 'uihlogcollector.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASE_URL = os.environ.get('DATABASE_URL', 'webdb:bi@123@192.168.0.82:3306/logcollector')
DATABASES = {
    'default': dj_database_url.parse(DATABASE_URL),
}


# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
#     }
# }


# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        #'rest_framework.authentication.TokenAuthentication',
        'uihlogcollectorrestserver.services.authentication.ExpiringTokenAuthentication'
    )
}

import datetime
EXPIRING_TOKEN_LIFESPAN = datetime.timedelta(days=1)


#logger
LOGGING_APP_PATH = '../app/logs/app-log.log'
LOGGING_ERROR_APP_PATH = '../app/logs/error-app-log.log'
LOGGING_APP_SCHEDULER_PATH = '../app/logs/scheduler-app-log.log'
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        
        'utillogfilter': {
            '()': 'uihlogutility.logging.filters.UtilityLogFilter',
        },
    },
    'handlers': {
        'console':{'class':'logging.StreamHandler','formatter': 'verbose'},
        'console_user':{
            'class': 'logging.StreamHandler',
            'filters': ['utillogfilter'],
            'formatter': 'verbose',
        },
        'file_scheduler': {
            'level': 'DEBUG',
            #'class': 'logging.FileHandler',
            'class' : 'logging.handlers.RotatingFileHandler',
            'maxBytes' : 1024*1024*10, # 10MB
            'backupCount' : 10,
            'filename': LOGGING_APP_SCHEDULER_PATH,
            'filters': ['utillogfilter'],
            'formatter': 'file_format'
        },
        'file': {
            'level': 'DEBUG',
            #'class': 'logging.FileHandler',
            'class' : 'logging.handlers.RotatingFileHandler',
            'maxBytes' : 1024*1024*10, # 10MB
            'backupCount' : 10,
            'filename': LOGGING_APP_PATH,
            'filters': ['utillogfilter'],
            'formatter': 'file_format'
        }
    },
    'loggers': {
        'django': {
            'handlers': ['file' ,'console_user'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
            'propagate': True,
            'filters': ['utillogfilter'],
        },
        'scheduler' : {
            'handlers': ['file','file_scheduler' ],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
            'filters': ['utillogfilter'],
            'propagate': True,
        },
        'django.db.backends': {
            'handlers': ['console_user','file'],
            'filters': ['utillogfilter'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
            'propagate': True,
        },
    },
    'formatters': {
        'request_format': {
            'format': '%(remote_addr)s %(username)s "%(request_method)s '
            '%(path_info)s %(server_protocol)s" %(http_user_agent)s '
            '%(message)s %(asctime)s',
            'datefmt': '%Y-%m-%d %H:%M:%S',
        },
        'verbose': {
            #module
            'format': '%(username)s: %(levelname)-7s %(asctime)s [%(filename)s:%(lineno)d - %(funcName)s()] %(process)d %(thread)d - %(message)s',
            'datefmt': '%Y-%m-%dT%H:%M:%S',
        },
        'file_format':{
            'format' : '%(username)s: %(asctime)s [%(levelname)s] [%(filename)s:%(lineno)d %(funcName)s() %(process)d %(thread)d] - %(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S',
        },
    },
}


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Bangkok'

USE_I18N = True

USE_L10N = True

USE_TZ = False

#for run uwsgi in server
RUN_UWSGI=True if os.environ.get('RUN_UWSGI',"False").lower() == 'true' else False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/
WEB_REAL_PATH = 'logyou'

STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
)

#used uwsgi create static folder
STATIC_ROOT = os.path.join(BASE_DIR, "static")

#not used in run uwsgi    
#STATICFILES_DIRS = [
#    os.path.join(BASE_DIR, "static"),   
#]

STATIC_URL = '/%s/static/' %(WEB_REAL_PATH)



# expire session
TIME = 30*60  # Half an hour or your time
SESSION_SERIALIZER = 'django.contrib.sessions.serializers.PickleSerializer'
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_COOKIE_AGE = TIME    # change expired session
SESSION_IDLE_TIMEOUT = TIME  # logout


CSRF_FAILURE_VIEW = 'uihlogmaintemplate.views.csrf_failure'
LOGIN_REDIRECT_URL = '/%s/web/' %(WEB_REAL_PATH)
LOGIN_URL= '/%s/user/login/' %(WEB_REAL_PATH)

PUBLIC_VIEWS = [
    
    # 'django.contrib.auth.views.LoginView',
    # 'uihiotnotify.iotnotify.restiot.RestIOTView',
    # 'uihiotnotify.iotnotify.tagiot.TagIOTView',
]

#Tong web console
ASGI_APPLICATION = 'uihterminal.routing.application'
PATH_WEBSOCKET= 'terminal'

print ("Load Dynamic APP :")
SYSTEM_CONFIG = {}
# manual insert into table log_module_config and log_module_public_view_config
#ADMIN_REORDER = [{'app': 'authtoken', 'label': 'Auth Token'}, {'app': 'auth', 'label': 'Authentication and Authorization'}, {'app': 'uihlinenotify', 'label': 'uihlinenotify'}, {'app': 'uihlogmodels', 'label': 'Config', 'models': ['uihlogmodels.ModuleConfig', 'uihlogmodels.ModulePublicViewConfig', 'uihlogmodels.SystemConfig', 'uihlogmodels.SchedulerTaskConfig', 'uihlogmodels.AliveConfig', 'uihlogmodels.ConfigIntrusionDetection', 'uihlogmodels.EmailConfig', 'uihlogmodels.SearchConfig', 'uihlogmodels.IntrusionDetectionHistory', 'uihlogmodels.DeviceType', 'uihlogmodels.AdminReorderConfig']}, {'app': 'uihlogmodels', 'label': 'Company', 'models': ['uihlogmodels.AuthKey', 'uihlogmodels.CompanyProfile', 'uihlogmodels.CompanyLogPackage', 'uihlogmodels.MapCompanyAuthGroup', 'uihlogmodels.PrivateKeySSH',  'uihlogmodels.EventLog']}, {'app': 'uihlogmodels', 'label': 'Collector', 'models': ['uihlogmodels.LogCollector', 'uihlogmodels.LogCollectorStatus', 'uihlogmodels.LogCollectorAlert', 'uihlogmodels.LogCollectorAlive']}, {'app': 'uihlogmodels', 'label': 'Source', 'models': ['uihlogmodels.Source', 'uihlogmodels.SourceUsage', 'uihlogmodels.SourceStatus', 'uihlogmodels.SourceAlert', 'uihlogmodels.SourceAlive', 'uihlogmodels.SourceUsageHistory']}, {'app': 'uihlogmodels', 'label': 'User2345', 'models': ['uihlogmodels.AuthUserProfile', 'uihlogmodels.AuthUserLoginHistory', 'uihlogmodels.AuthUserSession']}]
ADMIN_REORDER = []
from .readmodule import readNewModule, readPublicView, readSystemConfig, readAdminReorderConfig
readNewModule(INSTALLED_APPS)

readPublicView(PUBLIC_VIEWS)
readSystemConfig(SYSTEM_CONFIG)

readAdminReorderConfig(ADMIN_REORDER)
