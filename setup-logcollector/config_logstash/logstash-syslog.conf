input {
	#Normal syslog
	udp {
		port => 514
#		#Note: buffer = 1024*1024*worker
#		receive_buffer_bytes => 33554432
#		workers => 32
#		queue_size => 2000
	}
	tcp{
		port => 514
	}
	#TCP Stream Syslog
#	tcp {
#		port => 1514
#		codec => multiline {
#			pattern => "^\s"
#			pattern => "^\t | ^\r | ^\n | ^\s"
#			what => previous
#           negate => true
#		}
#		tags => ["tcp_stream"]
#	}

# 	tcp{
# 		port => 10514
# 		ssl_cert => "/etc/logstash/ls_conf/new_cert/logyou-collector.crt"
# 		ssl_key => "/etc/logstash/ls_conf/new_cert/logyou-collector.key"
# 		ssl_certificate_authorities => ["/etc/logstash/ls_conf/new_cert/rootCA.pem"]
# #       ssl_certificate_authorities => ["/etc/logstash/ls_conf/new_cert/rootCA.pem","/etc/logstash/ls_conf/cert/Fortinet_CA_SSL.cer","/etc/logstash/ls_conf/cert/rootCA.pem"]
# #       ssl_certificate_authorities => "/etc/logstash/ls_conf/cert/rootCA.pem"
# 		ssl_verify => true
# 		ssl_enable => true
# 		tags => ["tcp_stream"]
# 		codec => multiline {
# 				pattern => "^\s"
# 				#pattern => "^\t | ^\r | ^\n | ^\s"
# 				#pattern => "\\$"
# 				what => previous
# #                       what => next
# #                      negate => true
# 		}
# 	}

	# #filebeat
	# beats {
	# 	port => 5044
	# 	codec => plain {charset => "UTF-8" }
	# 	tags => ["beats"]
	# 	add_field => {"host_device_type" => "winfilelog"}
	# 	add_field => {"host_allow_status" => "allow"}
	# }

	#winlogbeat and filebeat
	beats {
		port => 5040
		codec => plain {charset => "UTF-8" }
		tags => ["beats"]
		add_field => {"host_device_type" => "wineventlog"}
		add_field => {"host_allow_status" => "allow"}
		############################################
		# ssl => true
		# ssl_certificate_authorities => ["/etc/logstash/ls_conf/cert/rootCA.pem"]
		# ssl_certificate => "/etc/logstash/ls_conf/cert/logyou-collector.crt"
		# ssl_key => "/etc/logstash/ls_conf/cert/logyou-collector.key.p8"
		# ssl_verify_mode => "force_peer"
		############################################
	}

	#Netflow
#	udp {
#		port => 2055
#		codec => netflow
#		receive_buffer_bytes => 33554432
#		workers => 32
#		queue_size => 2000
		#add_field => {"host_device_type" => "netflow"}
		#add_field => {"host_allow_status" => "allow"}
#	}

#       stdin { }
}


filter{
	if [logtype]{
        if [logtype] == "syslog"{
                if [log][source][address]{
                        grok { match => { "[log][source][address]" => "%{IPV4:src_ip}:%{INT:src_port}"}}
                        mutate { copy => {"[src_ip]" => "[host]" }}
                        #mutate { replace  => {"[src_ip]" => "[host]" }}
                }
        }
    }
	translate {
        dictionary_path => "/etc/logstash/ls_conf/allow_list.yaml"
        destination => "[host_allow_status]"
        field => "[host]"
		fallback => "deny"
         #override => "false"
    }
	if "allow" not in [host_allow_status]{drop{}}
	else{
			ruby{
				code => 'event.set("@timestamp_utc", event.get("@timestamp"))'
			}
			ruby{
				code => 'event.set("@timestamp", LogStash::Timestamp.new(event.get("@timestamp")+25200))'
			}
			if "beats" in [tags]{
				mutate {replace => { "host" => "%{[host][name]}" }}
			}
			mutate {remove_field => [ "host_allow_status" ]}

			translate {
				dictionary_path => "/etc/logstash/ls_conf/device_type_list.yaml"
				destination => "[host_device_type]"
				field => "[host]"
				fallback => "other"
				#override => "true"
			}
	}
}

output {

	#Collec in fs
	#pipeline { send_to => [ls2fs] }
	#Collec in ES for Fortigate parshing log
	if "fortigate" in [host_device_type]{
		pipeline { send_to => [ls2fortigate] }
	}
	elseif "palo-alto" in [host_device_type] {
		pipeline { send_to => [ls2paloalto] }
	}
	elseif "wineventlog" in [host_device_type] {
		pipeline { send_to => [ls2winevent] }
	}
	# elseif "winfilelog" in [host_device_type] {
	# 	pipeline { send_to => [ls2winfile] }
	# }
	# elseif "netflow" in [host_device_type] {
	# 	pipeline { send_to => [ls2netflow] }
	# }
	# elseif "NSX" in [host_device_type] {
	# 	pipeline { send_to => [ls2nsx] }
	# }
	# elseif "BlueCoat-Proxy" in [host_device_type] {
	# 	pipeline { send_to => [ls2bluecoat] }
	# }
	# elseif "watchguard" in [host_device_type] {
	# 	pipeline { send_to => [ls2watchguard] }
	# }
	# elseif "hillstone" in [host_device_type] {
	# 	pipeline { send_to => [ls2hillstone] }
	# }
	else{	
		pipeline { send_to => [ls2es] }
		pipeline { send_to => [ls2fs] }	
	}
  
#   stdout {codec => rubydebug}
#	pipeline { send_to => [ls2http] }
#### line for auto-reload
}
