input {
    pipeline { address => [ls2winevent] }
}

filter{
    if [winlog]{
        ruby {
            code => '
                if !event.get("winlog").nil?
                    event.get("winlog").each { |k, v|
                        event.set(k,v)
                    }
                    event.remove("winlog")
                end

        #         if !event.get("event_data").nil?
        #             event.get("event_data").each { |k, v|
        #                 event.set("event_data"+k,v)
        #             }
        #             event.remove("event_data")
        #         end

        #         if !event.get("event").nil?
        #             event.get("event").each { |k, v|
        #                 event.set("event"+k,v)
        #             }
        #             event.remove("event")
        #             if !event.get(eventcode).nil?
        #                 event.set("eventid",event.get(eventcode))
        #                 event.remove("eventcode")
        #             end
        #         end
            '
        }

        # mutate { 
        #     rename => { "%{[event][code]}" => "eventid" }
        #     rename => { "%{[event][created]}" => "eventcreated" } 
        #     rename => { "%{[event][action]}" => "eventaction"  } 
        #     rename => { "%{[event][type]}" => "eventtype" } 
        #     rename => { "%{[event][category]}" => "eventcategory" }

        #     rename => { "%{[user][name]}" => "user" } 
        #     rename => { "%{[source][ip]}" => "srcip" } 
        #     rename => { "%{[winlog][keywords]}" => "winkeyword" } 

        # }
        if [event][code]{
            translate {
                dictionary_path => "/etc/logstash/ls_conf/winevent_desc.yaml"
                destination => "[event][description]"
                field => "[event][code]"
                fallback => "Not Detected"
                #override => "false"
            }
            if [event][code] in [4624, 4625, 125022, 4724, 4767, 4723, 4741, 4725, 4722, 4726, 4720, 4738]
            { mutate { add_tag => ["windows_alert"] } }
        }
    }

    if [channel]{
        mutate {
            replace => { "host_device_type" => "%{host_device_type}_%{channel}" }
        }
        mutate { gsub => [ "message", "[
                ]+", "" ] }
        mutate {replace => { "message" => "%{@timestamp} %{message}" }}
    }

    if [logtype]{
        mutate {
            replace => { "host_device_type" => "eventfile_%{logtype}" }
        }
        if [logtype] == "dhcp"
        {
            # dissect {
            #     mapping => {
            #         "message" => "%{id},%{date},%{time},%{description},%{srcip},%{hostname},%{macaddress},%{user},%{transactionid},%{qresult},%{probationtime},%{correlationid},%{dhcid},%{vendorclasshex},%{vendorclassascii},%{userclasshex},%{userclassascii},%{relayagentinformation},%{dnsregerror}"
            #         "message" => "%{ID},%{Date},%{Time},%{Description},%{IP_Address},%{Host_Name},%{MAC_Address},%{User_Name},%{TransactionID},%{QResult},%{Probationtime},%{CorrelationID},%{Dhcid},%{VendorClass_hex},%{VendorClass_ascii},%{UserClass_hex},%{UserClass_ascii},%{RelayAgentInformation},%{DnsRegError}"
            #     }
            # } 
            grok {
                # Server 2008+
                match => { "message" => "%{DATA:id},%{DATE_US:date},%{DATA:time},%{DATA:description},%{IPV4:srcip},%{DATA:hostname},%{DATA:macaddress},%{DATA:user},%{INT:TransactionID},%{INT:QResult},%{DATA:ProbationTime},%{DATA:CorrelationID}"}
                # Server 2003
                match => { "message" => "%{DATA:id},%{DATE_US:date},%{DATA:time},%{DATA:description},%{IPV4:srcip},%{DATA:hostname},%{DATA:macaddress},"}
                match => { "message" => "%{DATA:id},%{DATA:date},%{DATA:Time},%{DATA:description},%{IPV4:srcip},%{DATA:hostname},%{DATA:macaddress},"}
            }
            mutate
            {
                add_field => ["app", "DHCP"]
                remove_field=> ['date', 'time']
            }
        }
    }

    if [computer_name]{
        mutate {
            # replace => { "host" => "[@metadata][ip_address]" }
            copy => {"[computer_name]" => "[host]"}
        }
    }

    if [@metadata][ip_address]{
        mutate {
            # replace => { "host" => "[@metadata][ip_address]" }
            copy => {"[@metadata][ip_address]" => "[host]"}
        }
    }

    # if [fields][windows_ip_addr]{
    #     mutate {
    #             copy => {"[fields][windows_ip_addr]" => "[host]"}
    #     }
    # }

}

output {
  pipeline { send_to => [ls2es] }
  pipeline { send_to => [ls2fs] }
  #if "windows_alert" in [tags]{
  #    pipeline { send_to => [ls2http] }
  #}
#   stdout {codec => rubydebug}
}